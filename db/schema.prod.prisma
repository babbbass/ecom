datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[]
  cartItems CartItem[]
}

model Product {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  price       Float
  imageUrl    String
  stock       Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  CartItem    CartItem[]
  OrderItem   OrderItem[]
  categories  ProductCategory[]   
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  products ProductCategory[] 
}

model Order {
  id            Int       @id @default(autoincrement())
  user          User      @relation(fields: [userId], references: [id])
  userId        Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  status        String    
  total         Float
  orderItems    OrderItem[]
  paymentStatus PaymentStatus[]
}

model CartItem {
  id        Int       @id @default(autoincrement())
  product   Product   @relation(fields: [productId], references: [id])
  productId Int
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  quantity  Int       @default(1)
}

model OrderItem {
  id        Int       @id @default(autoincrement())
  product   Product   @relation(fields: [productId], references: [id])
  productId Int
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   Int
  quantity  Int
  price     Float     
}

model PaymentStatus {
  id           Int       @id @default(autoincrement())
  order        Order     @relation(fields: [orderId], references: [id])
  orderId      Int
  status       String    // "Paid", "Pending", "Failed"
  paymentDate  DateTime?
  transactionId String?  // ID de transaction du fournisseur de paiement
  amount       Float
}

model ProductCategory {
  product     Product         @relation(fields: [productId], references: [id])
  productId   Int
  category    Category        @relation(fields: [categoryId], references: [id])
  categoryId  Int

  @@id([productId, categoryId]) 
}
